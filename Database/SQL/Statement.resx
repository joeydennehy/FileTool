<?xml version="1.0" encoding="utf-8"?>
<root>
	<!--
	Microsoft ResX Schema Version 2.0

	The primary goals of this format is to allow a simple XML format
	that is mostly human readable. The generation and parsing of the various
	data types are done through the TypeConverter classes associated with the data types.

	Example:

		ado.net/XML headers & schema
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">
	System.Resources.ResXResourceReader, System.Windows.Forms, ...
	</resheader>
	<resheader name="writer">
	System.Resources.ResXResourceWriter, System.Windows.Forms, ...
	</resheader>
	<data name="Name1"><value>
	this is my long string</value><comment>
	this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1"
		mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized
		.NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon,
	System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string
		representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>

	There are any number of "resheader" rows that contain simple name/value pairs.

	Each data row contains a name, and value. The row also contains a type or mimetype.
	Type corresponds to a .NET class that support text/value conversion through the
	TypeConverter architecture.Classes that don't support this are
	serialized and stored with the mimetype set.

	The mimetype is used for serialized objects, and tells the ResXResourceReader
	how to depersist the object. This is currently not extensible.
	For a given mimetype the value must be set accordingly:

	Note - application/x-microsoft.net.object.binary.base64 is the format
	that the ResXResourceWriter will generate, however the reader
	can read any of the formats listed below.

	mimetype: application/x-microsoft.net.object.binary.base64
	value: The object must be serialized with
			: System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->

	<xsd:schema id="root"
		xmlns=""
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>

	<!--<data name ="UNIT_TEST_ONLY" xml:space="preserve">
		<value>
			SELECT
	TABLE_SCHEMA
	,TABLE_NAME
	,COLUMN_NAME
	,ORDINAL_POSITION
	,COLUMN_DEFAULT
	,IS_NULLABLE
	,DATA_TYPE

FROM
	information_schema.COLUMNS
WHERE
	TABLE_SCHEMA = 'glm_dev'
	AND
	DATA_TYPE = 'datetime'
		</value>
	</data>-->

	<data name ="UNIT_TEST_ONLY" xml:space="preserve">
		<value>
			SELECT * FROM foundation
		</value>
	</data>


	<data name="SELECT_ALL_URL_KEYS_AND_NAMES" xml:space="preserve">
		<value>
			SELECT
				f.FoundationId
				,f.UrlKey
				,f.Name 
				,CONCAT(f.UrlKey, ' - ', f.Name) AS FoundationDisplayText
			FROM 
				foundation f
			WHERE
				f.UrlKey IS NOT NULL
			ORDER BY 
				f.Name
		</value>
	</data>

	<data name="SELECT_APPLICATION_PROCESS_INFO" xml:space="preserve">
		<value>
			SELECT 
				ap.ApplicantProcessCode
			FROM 
				applicantprocess ap
			WHERE
				ap.FoundationProcessId = @FOUNDATION_PROCESS
		</value>
	</data>

	<data name="SELECT_FOUNDATION_PROCESS_INFO" xml:space="preserve">
		<value>
			SELECT 
				fp.FoundationProcessId 
				,fp.Name 
				,CONCAT(fp.FoundationProcessId, ' - ', fp.Name) AS ProcessDisplayText
			FROM 
				foundationprocess fp
			WHERE
				fp.FoundationId = @FOUNDATION_ID 
			ORDER BY 
				fp.Name
		</value>
	</data>

	<data name="SELECT_APPLICATION_SUPPORTING_DOCUMENTS_BY_FOUNDATION_ID" xml:space="preserve">
		<value>
			SELECT
				DISTINCT
					CONCAT(ap.ApplicantProcessCode, '\\supportingdocuments\\', d.FilePath) AS FileName
			FROM
				document d
				LEFT OUTER JOIN applicantprocess ap ON (d.ApplicantProcessId = ap.ApplicantProcessId)
			WHERE
				d.FoundationId = @FOUNDATION_ID
				AND
				NULLIF(d.ApplicantProcessId, '') IS NOT NULL
			ORDER BY
				FileName
		</value>
	</data>

	<data name="SELECT_ORG_SUPPORTING_DOCUMENTS_BY_FOUNDATION_ID" xml:space="preserve">
		<value>
			SELECT
				DISTINCT
					CONCAT('ORG-', d.OrganizationId, '\\supportingdocuments\\', d.FilePath) AS FileName
			FROM
				document d
			WHERE
				d.FoundationId = @FOUNDATION_ID
				AND
				NULLIF(d.OrganizationId, '') IS NOT NULL
			ORDER BY
				FileName
		</value>
	</data>

	<data name="SELECT_REQUEST_FILES_BY_URL_KEY" xml:space="preserve">
		<value>
			SELECT
				DISTINCT
					CONCAT(ap.ApplicantProcessCode, '\\', st.Name, '\\', an.Value) AS FileName
			FROM
				submission su
				LEFT OUTER JOIN applicantprocess ap ON (su.RequestId = ap.ApplicantProcessId)
				LEFT OUTER JOIN stage st ON (su.StageId = st.StageId)
				LEFT OUTER JOIN answer an ON (su.SubmissionId = an.SubmissionId)
				LEFT OUTER JOIN element em ON (an.ElementId = em.ElementId)
			WHERE
				su.FoundationId = @FOUNDATION_ID
				AND
				NULLIF(ap.ApplicantProcessCode, '') IS NOT NULL
				AND
				NULLIF(an.Value, '') IS NOT NULL
				AND
				em.Type IN (17, 18)
			ORDER BY
				FileName
		</value>
	</data>

	<data name="SELECT_SHARED_FILES_BY_FOUNDATION_ID" xml:space="preserve">
		<value>
			SELECT
				CONCAT('\\Shared\\' , d.FilePath) AS FileName
			FROM
				document d
			WHERE
				d.FoundationId = @FOUNDATION_ID
				AND
				d.DocumentTypeId = 9
			ORDER BY
				FileName
		</value>
	</data>
	
	<data name="SELECT_REQUEST_DOCUMENT_ID" xml:space="preserve">
		<value>
			SELECT 
				DocumentId 
					FROM 
						document d 
					WHERE 
						d.ApplicantProcessId = @REQUESET_ID
						AND
						d.Name like '%@FILE_NAME%'
		</value>
	</data>
	
	<data name="SELECT_ORGANIZATION_DOCUMENT_ID" xml:space="preserve">
		<value>
			SELECT 
				DocumentId 
					FROM 
						document d 
					WHERE 
						d.ApplicantProcessId = @ORGANIZATION_ID
						AND
						d.Name like '%@FILE_NAME%'
		</value>
	</data>
	
	<data name="SELECT_SHARED_DOCUMENT_ID" xml:space="preserve">
		<value>
			SELECT 
				DocumentId 
					FROM 
						document d 
					WHERE 
						NULLIF(d.ApplicantProcessId, '') IS NULL
						AND
						NULLIF(d.OrganizationId, '') IS NULL
						AND
						d.Name like '%@FILE_NAME%'
		</value>
	</data>

	<data name="SELECT_REQEST_ANSWER_ID" xml:space="preserve">
		<value>
					SELECT DISTINCT
						an.AnswerID
							FROM
								submission su
								LEFT OUTER JOIN applicantprocess ap ON (su.RequestId = ap.ApplicantProcessId)
								LEFT OUTER JOIN stage st ON (su.StageId = st.StageId)
								LEFT OUTER JOIN answer an ON (su.SubmissionId = an.SubmissionId)
							WHERE
								su.FoundationId = @FOUNDATION_ID
								AND
								ap.ApplicantProcessCode = @REQUEST_PROCESS_CODE
								AND
								LOWER(st.Name) = @STAGE_NAME
								AND
								an.Value like CONCAT('%', @FILE_NAME, '%')
				
		</value>
	</data>

	<data name="SELECT_MISMATCHED_REQUEST_ID_AND_CODE" xml:space="preserve">
		<value>
					SELECT 
						ap.ApplicantProcessId,
						ap.ApplicantProcessCode,
						CONCAT(ap.ApplicantProcessCode, ' -> ', ap.ApplicantProcessId) AS RequestDisplayText
					FROM
						applicantprocess ap
					WHERE
						ap.FoundationId = @FOUNDATION_ID
						AND
						ap.ApplicantProcessCode != ap.ApplicantProcessId
		</value>
	</data>
	<data name="UPDATE_MISMATCH_REQUEST_ID_AND_CODE" xml:space="preserve">
		<value>
					UPDATE 
						applicantprocess ap
					SET 
						ap.ApplicantProcessCode = ap.ApplicantProcessId
					WHERE
						ap.ApplicantProcessId = @REQUEST_ID
		</value>
	</data>
	
	<data name="DELETE_REQEST_DOCUMENT_RECORD" xml:space="preserve">
		<value>
			DELETE
			FROM
				answer
			WHERE
				answer.AnswerId = @ANSWER_ID
		</value>
	</data>
	
	<data name="DELETE_DOCUMENT_ROLE" xml:space="preserve">
		<value>
			DELETE
			FROM
				documentrole dr
			WHERE
				dr.DocumentId = @DOCUMENT_ID
		</value>
	</data>
	
	<data name="DELETE_DOCUMENT_RECORD" xml:space="preserve">
		<value>
			DELETE
			FROM
				document d
			WHERE
				d.DocumentId = @DOCUMENT_ID
		</value>
	</data>
</root>